name: Deploy to Staging

on:
  push:
    branches: [staging]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '18'
  STAGING_DEPLOYMENT_TIMEOUT: '600'

jobs:
  # Job 1: Code Quality & Testing
  quality-check:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Type checking
        run: npm run typecheck

      - name: Lint code
        run: npm run lint

      - name: Format check
        run: npm run format:check

      - name: Run unit tests
        run: npm run test:coverage
        env:
          VITE_APP_ENV: staging

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Build staging
        run: npm run build:staging
        env:
          VITE_APP_ENV: staging
          VITE_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}
          VITE_OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Analyze bundle size
        run: |
          npx bundlesize
          echo "Bundle analysis complete"

  # Job 2: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: quality-check
    if: github.ref == 'refs/heads/staging' || github.event_name == 'pull_request'
    timeout-minutes: 10
    
    environment:
      name: staging
      url: https://staging.doublecheckverified.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Build for staging
        run: npm run build:staging
        env:
          VITE_APP_ENV: staging
          VITE_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}
          VITE_OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          VITE_GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
          VITE_SENTRY_DSN: ${{ secrets.STAGING_SENTRY_DSN }}

      - name: Deploy to Railway Staging
        uses: railway-deploy-action@v1.0.0
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN }}
          service: str-certified-staging
          environment: staging
          timeout: ${{ env.STAGING_DEPLOYMENT_TIMEOUT }}

      - name: Wait for deployment health check
        run: |
          echo "Waiting for staging deployment to be healthy..."
          timeout 300 bash -c '
            while true; do
              if curl -f https://staging.doublecheckverified.com/health; then
                echo "Staging deployment is healthy"
                break
              fi
              echo "Waiting for health check..."
              sleep 10
            done
          '

      - name: Run database migrations
        run: |
          npx supabase db push --project-ref ${{ secrets.STAGING_SUPABASE_PROJECT_REF }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

  # Job 3: Integration Tests
  integration-tests:
    name: Integration & E2E Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/staging' || github.event_name == 'pull_request'
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests against staging
        run: npm run test:e2e:staging
        env:
          STAGING_BASE_URL: https://staging.doublecheckverified.com
          TEST_USER_EMAIL: ${{ secrets.STAGING_TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.STAGING_TEST_USER_PASSWORD }}
          TEST_ADMIN_EMAIL: ${{ secrets.STAGING_TEST_ADMIN_EMAIL }}
          TEST_ADMIN_PASSWORD: ${{ secrets.STAGING_TEST_ADMIN_PASSWORD }}

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-test-results
          path: test-results/
          retention-days: 7

      - name: API health check
        run: |
          echo "Running API health checks..."
          curl -f https://staging.doublecheckverified.com/health || exit 1
          curl -f https://app-staging.doublecheckverified.com/health || exit 1
          curl -f https://admin-staging.doublecheckverified.com/health || exit 1

  # Job 4: Performance Tests
  performance-tests:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/staging'
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: Run Lighthouse audit
        run: |
          lhci autorun --config=.lighthouserc.staging.json
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Load testing with Artillery
        run: |
          npx artillery run load-tests/staging-load-test.yml
        env:
          STAGING_BASE_URL: https://staging.doublecheckverified.com

  # Job 5: Notification & Cleanup
  notify-and-cleanup:
    name: Notification & Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, integration-tests, performance-tests]
    if: always()
    
    steps:
      - name: Determine deployment status
        id: status
        run: |
          if [[ "${{ needs.deploy-staging.result }}" == "success" && 
                "${{ needs.integration-tests.result }}" == "success" && 
                ("${{ needs.performance-tests.result }}" == "success" || "${{ needs.performance-tests.result }}" == "skipped") ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ Staging deployment successful! All tests passed." >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Staging deployment failed. Check the logs for details." >> $GITHUB_OUTPUT
          fi

      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ steps.status.outputs.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.STAGING_SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              attachments: [{
                color: '${{ steps.status.outputs.status }}' === 'success' ? 'good' : 'danger',
                title: 'STR Certified Staging Deployment',
                text: '${{ steps.status.outputs.message }}',
                fields: [{
                  title: 'Environment',
                  value: 'Staging',
                  short: true
                }, {
                  title: 'Branch',
                  value: '${{ github.ref_name }}',
                  short: true
                }, {
                  title: 'Commit',
                  value: '${{ github.sha }}',
                  short: true
                }, {
                  title: 'Author',
                  value: '${{ github.actor }}',
                  short: true
                }],
                footer: 'GitHub Actions',
                ts: '${{ github.event.head_commit.timestamp }}'
              }]
            }

      - name: Update deployment status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment.id,
              state: '${{ steps.status.outputs.status }}',
              description: '${{ steps.status.outputs.message }}',
              environment_url: 'https://staging.doublecheckverified.com'
            });

      - name: Cleanup old deployments
        run: |
          echo "Cleaning up old staging deployments..."
          # This would typically interact with Railway API to clean up old deployments
          echo "Cleanup completed"

  # Job 6: Security Scan (Optional)
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/staging'
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: OWASP ZAP security scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'https://staging.doublecheckverified.com'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'