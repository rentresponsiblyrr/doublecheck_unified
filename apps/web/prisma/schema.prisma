// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Organizations (Multi-tenancy)
model Organization {
  id                String         @id @default(cuid())
  name              String
  slug              String         @unique
  plan              PlanType       @default(STARTER)
  settings          Json           @default("{}")
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  users             User[]
  properties        Property[]
  apiKeys           ApiKey[]
  templates         ChecklistTemplate[]
  
  @@index([slug])
}

// User management
model User {
  id                String         @id @default(cuid())
  email             String         @unique
  name              String?
  role              UserRole       @default(INSPECTOR)
  organizationId    String
  passwordHash      String?
  emailVerified     DateTime?
  image             String?
  settings          Json           @default("{}")
  lastActiveAt      DateTime       @default(now())
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  organization      Organization   @relation(fields: [organizationId], references: [id])
  sessions          Session[]
  accounts          Account[]
  inspections       Inspection[]
  assignedItems     ChecklistItem[]
  mediaUploads      Media[]
  activities        Activity[]
  notifications     Notification[]
  
  @@index([email])
  @@index([organizationId])
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Properties
model Property {
  id                String         @id @default(cuid())
  organizationId    String
  externalId        String?
  name              String
  address           String
  city              String
  state             String
  zip               String
  country           String         @default("US")
  latitude          Float?
  longitude         Float?
  propertyType      PropertyType
  bedrooms          Int?
  bathrooms         Float?
  maxGuests         Int?
  
  // Platform URLs
  vrboUrl           String?
  airbnbUrl         String?
  bookingUrl        String?
  
  // Metadata
  amenities         Json           @default("[]")
  houseRules        Json           @default("[]")
  photos            Json           @default("[]")
  scrapedData       Json?
  
  status            PropertyStatus @default(PENDING)
  certificationDate DateTime?
  nextInspectionDue DateTime?
  
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  organization      Organization   @relation(fields: [organizationId], references: [id])
  inspections       Inspection[]
  scraperJobs       ScraperJob[]
  
  @@index([organizationId])
  @@index([status])
  @@index([nextInspectionDue])
}

// Inspections
model Inspection {
  id                String            @id @default(cuid())
  propertyId        String
  inspectorId       String
  organizationId    String
  templateId        String?
  
  status            InspectionStatus  @default(SCHEDULED)
  scheduledDate     DateTime?
  startedAt         DateTime?
  completedAt       DateTime?
  
  // Scoring
  score             Float?
  passStatus        PassStatus?
  
  // AI Analysis
  aiInsights        Json?
  aiProcessedAt     DateTime?
  
  // Collaboration
  conflictCount     Int              @default(0)
  
  // Mobile/Offline
  offlineData       Json?
  syncedAt          DateTime?
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  property          Property         @relation(fields: [propertyId], references: [id])
  inspector         User             @relation(fields: [inspectorId], references: [id])
  template          ChecklistTemplate? @relation(fields: [templateId], references: [id])
  checklistItems    ChecklistItem[]
  media             Media[]
  report            InspectionReport?
  activities        Activity[]
  assignments       InspectorAssignment[]
  
  @@index([propertyId])
  @@index([inspectorId])
  @@index([status])
  @@index([scheduledDate])
}

// Inspector assignments for collaboration
model InspectorAssignment {
  id                String         @id @default(cuid())
  inspectionId      String
  inspectorId       String
  role              AssignmentRole @default(SECONDARY)
  assignedAt        DateTime       @default(now())
  
  inspection        Inspection     @relation(fields: [inspectionId], references: [id])
  
  @@unique([inspectionId, inspectorId])
  @@index([inspectorId])
}

// Checklist templates
model ChecklistTemplate {
  id                String         @id @default(cuid())
  organizationId    String
  name              String
  description       String?
  version           Int            @default(1)
  isActive          Boolean        @default(true)
  
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  organization      Organization   @relation(fields: [organizationId], references: [id])
  categories        Category[]
  items             TemplateItem[]
  inspections       Inspection[]
  
  @@index([organizationId])
}

// Categories
model Category {
  id                String            @id @default(cuid())
  templateId        String
  name              String
  description       String?
  icon              String?
  color             String?
  sortOrder         Int               @default(0)
  
  template          ChecklistTemplate @relation(fields: [templateId], references: [id])
  templateItems     TemplateItem[]
  checklistItems    ChecklistItem[]
  
  @@index([templateId])
}

// Template items
model TemplateItem {
  id                String            @id @default(cuid())
  templateId        String
  categoryId        String
  
  label             String
  description       String?
  helpText          String?
  
  evidenceType      EvidenceType      @default(PHOTO)
  isRequired        Boolean           @default(true)
  allowMultiple     Boolean           @default(false)
  
  // AI Configuration
  aiPrompt          String?
  aiValidationRules Json?
  
  sortOrder         Int               @default(0)
  
  template          ChecklistTemplate @relation(fields: [templateId], references: [id])
  category          Category          @relation(fields: [categoryId], references: [id])
  checklistItems    ChecklistItem[]
  
  @@index([templateId])
  @@index([categoryId])
}

// Checklist items (actual inspection items)
model ChecklistItem {
  id                String         @id @default(cuid())
  inspectionId      String
  templateItemId    String?
  categoryId        String?
  assignedToId      String?
  
  label             String
  status            ItemStatus     @default(PENDING)
  
  // Evidence
  evidenceType      EvidenceType
  notes             String?
  
  // AI Validation
  aiStatus          AiStatus?
  aiConfidence      Float?
  aiSuggestions     Json?
  aiProcessedAt     DateTime?
  
  // Versioning
  version           Int            @default(1)
  lastModifiedBy    String?
  lastModifiedAt    DateTime?
  
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  inspection        Inspection     @relation(fields: [inspectionId], references: [id])
  templateItem      TemplateItem?  @relation(fields: [templateItemId], references: [id])
  category          Category?      @relation(fields: [categoryId], references: [id])
  assignedTo        User?          @relation(fields: [assignedToId], references: [id])
  media             Media[]
  history           ItemHistory[]
  
  @@index([inspectionId])
  @@index([status])
  @@index([assignedToId])
}

// Item history for audit trail
model ItemHistory {
  id                String         @id @default(cuid())
  checklistItemId   String
  userId            String
  action            String
  changes           Json
  createdAt         DateTime       @default(now())
  
  checklistItem     ChecklistItem  @relation(fields: [checklistItemId], references: [id])
  
  @@index([checklistItemId])
  @@index([userId])
}

// Media files
model Media {
  id                String         @id @default(cuid())
  checklistItemId   String?
  inspectionId      String
  uploadedById      String
  
  filename          String
  mimeType          String
  size              Int
  url               String
  thumbnailUrl      String?
  
  // Metadata
  width             Int?
  height            Int?
  duration          Int?           // For videos
  
  // AI Analysis
  aiAnalysis        Json?
  aiTags            String[]
  
  // Mobile Upload
  offlineId         String?
  uploadedAt        DateTime       @default(now())
  
  checklistItem     ChecklistItem? @relation(fields: [checklistItemId], references: [id])
  inspection        Inspection     @relation(fields: [inspectionId], references: [id])
  uploadedBy        User           @relation(fields: [uploadedById], references: [id])
  
  @@index([inspectionId])
  @@index([checklistItemId])
}

// Inspection reports
model InspectionReport {
  id                String         @id @default(cuid())
  inspectionId      String         @unique
  
  format            ReportFormat   @default(PDF)
  status            ReportStatus   @default(PENDING)
  
  // Content
  summary           String?
  findings          Json
  recommendations   Json
  
  // Files
  pdfUrl            String?
  htmlContent       String?        @db.Text
  
  generatedAt       DateTime?
  sentAt            DateTime?
  
  inspection        Inspection     @relation(fields: [inspectionId], references: [id])
  
  @@index([status])
}

// Scraper jobs
model ScraperJob {
  id                String         @id @default(cuid())
  propertyId        String
  platform          Platform
  
  status            JobStatus      @default(PENDING)
  priority          Int            @default(0)
  
  attemptCount      Int            @default(0)
  maxAttempts       Int            @default(3)
  
  data              Json?
  error             String?
  
  scheduledFor      DateTime       @default(now())
  startedAt         DateTime?
  completedAt       DateTime?
  
  property          Property       @relation(fields: [propertyId], references: [id])
  
  @@index([status, scheduledFor])
  @@index([propertyId])
}

// Activity logging
model Activity {
  id                String         @id @default(cuid())
  userId            String
  inspectionId      String?
  
  action            String
  entityType        String
  entityId          String
  
  metadata          Json?
  ipAddress         String?
  userAgent         String?
  
  createdAt         DateTime       @default(now())
  
  user              User           @relation(fields: [userId], references: [id])
  inspection        Inspection?    @relation(fields: [inspectionId], references: [id])
  
  @@index([userId])
  @@index([inspectionId])
  @@index([entityType, entityId])
}

// Notifications
model Notification {
  id                String         @id @default(cuid())
  userId            String
  type              String
  title             String
  message           String
  link              String?
  read              Boolean        @default(false)
  createdAt         DateTime       @default(now())
  
  user              User           @relation(fields: [userId], references: [id])
  
  @@index([userId, read])
}

// API keys for integrations
model ApiKey {
  id                String         @id @default(cuid())
  organizationId    String
  name              String
  key               String         @unique
  scopes            String[]
  expiresAt         DateTime?
  lastUsedAt        DateTime?
  createdAt         DateTime       @default(now())
  
  organization      Organization   @relation(fields: [organizationId], references: [id])
  
  @@index([key])
  @@index([organizationId])
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  INSPECTOR
  REVIEWER
  API_USER
}

enum PropertyType {
  HOUSE
  APARTMENT
  CONDO
  TOWNHOUSE
  CABIN
  VILLA
  OTHER
}

enum PropertyStatus {
  PENDING
  ACTIVE
  CERTIFIED
  SUSPENDED
  ARCHIVED
}

enum InspectionStatus {
  SCHEDULED
  IN_PROGRESS
  REVIEW
  COMPLETED
  CANCELLED
}

enum PassStatus {
  PASSED
  FAILED
  CONDITIONAL
}

enum ItemStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  NA
}

enum EvidenceType {
  PHOTO
  VIDEO
  DOCUMENT
  VISUAL
  NOTE
}

enum AiStatus {
  PENDING
  PROCESSING
  APPROVED
  FLAGGED
  ERROR
}

enum Platform {
  VRBO
  AIRBNB
  BOOKING
}

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum ReportFormat {
  PDF
  HTML
  EXCEL
}

enum ReportStatus {
  PENDING
  GENERATING
  READY
  SENT
  FAILED
}

enum PlanType {
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum AssignmentRole {
  PRIMARY
  SECONDARY
  OBSERVER
}