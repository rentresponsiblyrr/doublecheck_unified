/**
 * Utility functions for handling ID type conversions between frontend (strings) and database (integers/UUIDs)
 */

/**
 * Converts a property ID from string to integer for database operations
 * @param propertyId - Property ID as string (from frontend)
 * @returns Property ID as integer for database
 * @throws Error if the ID is not a valid integer
 */
export function convertPropertyIdToInt(propertyId: string): number {
  const propertyIdInt = parseInt(propertyId, 10);
  if (isNaN(propertyIdInt)) {
    throw new Error(
      `Invalid property ID: ${propertyId} - must be a valid integer`,
    );
  }
  return propertyIdInt;
}

/**
 * Validates that a string is a valid UUID format
 * @param id - ID string to validate
 * @returns true if valid UUID format
 */
export function isValidUUID(id: string): boolean {
  const uuidRegex =
    /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
  return uuidRegex.test(id);
}

/**
 * Validates that a string represents a valid integer
 * @param id - ID string to validate
 * @returns true if valid integer
 */
export function isValidIntegerString(id: string): boolean {
  const intValue = parseInt(id, 10);
  return !isNaN(intValue) && intValue.toString() === id;
}

/**
 * Converts UUID-like property IDs back to integers for database compatibility
 * @param propertyId - Property ID (UUID-like string from frontend or integer string)
 * @returns Property ID as integer for database
 */
export function convertUUIDLikePropertyIdToInt(propertyId: string): number {
  // Handle UUID-like strings generated by our function
  // Format: '00000000-0000-0000-0000-000000000001' -> 1
  if (propertyId.match(/^00000000-0000-0000-0000-[0-9]{12}$/)) {
    const intPart = propertyId.substring(24); // Get last 12 characters
    return parseInt(intPart, 10);
  }

  // Handle pure integer strings
  if (propertyId.match(/^[0-9]+$/)) {
    return parseInt(propertyId, 10);
  }

  // Handle actual UUIDs - these should not exist for properties in current schema
  // But if they do, we need to throw an error since we can't convert them
  if (isValidUUID(propertyId)) {
    throw new IdConversionError(
      "Cannot convert real UUID to integer - database schema mismatch",
      "property",
      propertyId,
    );
  }

  throw new IdConversionError(
    "Invalid property ID format",
    "property",
    propertyId,
  );
}

/**
 * Type-safe ID conversion for different entity types
 */
export const IdConverter = {
  /**
   * Properties use integer IDs in production schema (converted to strings in frontend)
   */
  property: {
    toDatabase: (id: string) => parseInt(id, 10), // Convert string to integer for database
    validate: (id: string) => !isNaN(parseInt(id, 10)) && parseInt(id, 10) > 0,
  },

  /**
   * Inspections use UUID strings
   */
  inspection: {
    toDatabase: (id: string) => id, // Already a UUID string
    validate: isValidUUID,
  },

  /**
   * Users use UUID strings from Supabase auth
   */
  user: {
    toDatabase: (id: string) => id, // Already a UUID string
    validate: isValidUUID,
  },

  /**
   * Checklist items - depends on implementation
   */
  checklistItem: {
    toDatabase: (id: string) => id, // Assuming UUID for now
    validate: isValidUUID,
  },
};

/**
 * Error class for ID conversion issues
 */
export class IdConversionError extends Error {
  constructor(
    message: string,
    public readonly entityType: string,
    public readonly originalId: string,
  ) {
    super(`[${entityType}] ${message}: ${originalId}`);
    this.name = "IdConversionError";
  }
}
